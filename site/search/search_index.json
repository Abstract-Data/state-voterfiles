{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Abstract Data  State Voter File Reader &amp; Validator","text":""},{"location":"#features","title":"Features","text":"<ul> <li><code>class TomlReader</code> - Read state column fields into Python</li> <li><code>class VoterInfo</code> - Map column fields to class for reference</li> <li><code>class VoterFileLoader</code> - Load a state voter file</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>main  ...\nfuncs/\n    column_formats.py # Where `VoterInfo` class object is nested\nutils/ \n    csv_loader.py # CSV file reader\n    toml_reader.py # Toml file reader\nstate_fields/\n    ohio-fields.toml # Ohio voter file fields\n    texas-fields.toml # Texas voter file fields\n</code></pre>"},{"location":"funcs/toml_reader_doc/","title":"TomlReader","text":""},{"location":"funcs/toml_reader_doc/#tomlreader-read-toml-files-into-python-dictionaries","title":"TomlReader - Read TOML files into Python dictionaries","text":"<p><code>TomlReader</code> is a simple class that allows you to read TOML files and convert them into Python dictionaries. It uses the tomli package to parse the TOML file and return the resulting dictionary.</p>"},{"location":"funcs/toml_reader_doc/#installation","title":"Installation","text":"<p>Before using <code>TomlReader</code>, you will need to install the tomli package. You can do this using pip: <pre><code>pip install tomli\n</code></pre></p> <p>Once you have installed tomli, you can install <code>TomlReader</code> by copying the code into a Python file and importing it.</p>"},{"location":"funcs/toml_reader_doc/#usage","title":"Usage","text":"<p>To use <code>TomlReader</code>, you will first need to create an instance of the class by providing it with the path to the TOML file you wish to read. Once you have created an instance, you can access the data in the TOML file using the data property.</p> <p>Here is an example:</p> toml_reader.py<pre><code>from dataclasses import dataclass, field\nfrom pathlib import Path\nimport tomli\n@dataclass\nclass TomlReader:\n_file: Path\n_data: dict = field(init=False)\n@property\ndef data(self):\nwith open(self._file, 'rb') as f:\nreturn tomli.load(f)\n# Create an instance of TomlReader with the path to the TOML file\nreader = TomlReader(Path('/path/to/myfile.toml'))\n# Access the data in the TOML file using the data property\nmydata = reader.data\n# Now you can use the data in your Python code\nprint(mydata['some_key'])\n</code></pre> <p>In the example above, mydata will be a Python dictionary containing the data in the TOML file.</p>"},{"location":"funcs/toml_reader_doc/#conclusion","title":"Conclusion","text":"<p><code>TomlReader</code> is a simple class that allows you to read TOML files and convert them into Python dictionaries. It is easy to use and can be a useful tool when working with TOML files in Python.</p>"},{"location":"funcs/voter_file_loader/","title":"VoterFileLoader","text":""},{"location":"funcs/voter_file_loader/#voterfileloader-load-voter-data-from-a-file","title":"VoterFileLoader - Load voter data from a file","text":"<p>VoterFileLoader is a class that allows you to load voter data from a file and convert it into a dictionary. It can handle both CSV and TXT file formats, and can also format the keys in the resulting dictionary to make them easier to work with.</p>"},{"location":"funcs/voter_file_loader/#installation","title":"Installation","text":"<p><code>VoterFileLoader</code> is not a separate package and is provided as a class within your own code.</p>"},{"location":"funcs/voter_file_loader/#usage","title":"Usage","text":"<p>To use <code>VoterFileLoader</code>, you will first need to create an instance of the class by providing it with the path to the voter file you wish to load. Once you have created an instance, you can access the data in the voter file using the data property.</p> <p>Here is an example:</p> csv_loader.py<pre><code>from dataclasses import dataclass, field\nfrom pathlib import Path\nimport csv\nimport re\n@dataclass\nclass VoterFileLoader:\ndef __init__(self, file: Path, **kwargs):\nself._file = file\nself._data = field(init=False)\n@property\ndef data(self):\nif self._file.suffix == '.txt':\n_delim = ','\nelse:\n_delim = None\ndef read_file():\nwith open(self._file, 'r') as f:\n_reader = csv.DictReader(f, delimiter=_delim) if _delim else csv.DictReader(f)\nfor record in _reader:\nyield record\nself._data = read_file()\nreturn self._data\n@data.setter\ndef data(self, data: dict):\nself._data = data\n@staticmethod\ndef format_keys(record_dict: dict) -&gt; dict:\n_updated_data = {}\nfor index, record in record_dict.items():\nupdated_record = {}\nfor k, v in record.items():\n_reformat_key = re.sub(r'(/)', '-', k)\nif _reformat_key is not None:\nupdated_record[_reformat_key] = v\nelse:\nupdated_record[k] = v\n_updated_data[index] = updated_record\nreturn _updated_data\n</code></pre> <p>In the example above, <code>VoterFileLoader</code> will load a voter file in either CSV or TXT format, depending on the file extension. The resulting data will be returned as a dictionary. You can also use the <code>format_keys</code> method to format the keys in the resulting dictionary.</p> <p>To use <code>VoterFileLoader</code> in your own code, you can create an instance of the class and access the data using the data property:</p> <pre><code># Create an instance of VoterFileLoader with the path to the voter file\nloader = VoterFileLoader(Path('/path/to/myfile.csv'))\n# Access the data in the voter file using the data property\nvoter_data = loader.data\n# Now you can use the voter data in your Python code\nprint(voter_data)\n</code></pre>"},{"location":"funcs/voter_file_loader/#conclusion","title":"Conclusion","text":"<p><code>VoterFileLoader</code> is a simple class that allows you to load voter data from a file and convert it into a dictionary. It is easy to use and can be a useful tool when working with voter data in Python.</p>"},{"location":"funcs/voter_info_doc/","title":"VoterInfo","text":""},{"location":"funcs/voter_info_doc/#voter-info-class-documentation","title":"Voter Info Class Documentation","text":"<p>This module provides a <code>VoterInfo</code> class, which is used to parse a state's TOML file, turning each column into reference variables.</p>"},{"location":"funcs/voter_info_doc/#usage","title":"Usage","text":"<p>First, import the <code>VoterInfo</code> class: <pre><code>from voter_info import VoterInfo\n</code></pre></p> <p>Next, create an instance of the <code>VoterInfo</code> class by passing in the path to the TOML file for the state you are interested in: <pre><code>vi = VoterInfo('/path/to/state-toml-file.toml')\n</code></pre></p> <p>You can then access the voter information for a given voter using the reference variables generated by the <code>VoterInfo</code> class: <pre><code>voter_info = vi.get_voter_info(vuid)\n</code></pre></p> <p>Here, vuid is the unique identifier for the voter you are interested in. The <code>get_voter_info</code> method returns a dictionary containing the voter's information.</p> <p></p>"},{"location":"funcs/voter_info_doc/#voterinfo-class","title":"VoterInfo class","text":""},{"location":"funcs/voter_info_doc/#class-variables","title":"Class Variables","text":"<p><code>column_map</code>: a ClassVar dictionary that maps TOML columns to reference variables.</p> <p><code>address_parts</code>: a ClassVar dictionary that maps address parts to reference variables. </p>"},{"location":"funcs/voter_info_doc/#instance-variables","title":"Instance Variables","text":"<p><code>state</code>: the state abbreviation.</p> <p><code>data</code>: a dictionary containing the parsed TOML data.</p> <p><code>elections</code>: a dictionary containing information about the state's elections. </p>"},{"location":"funcs/voter_info_doc/#methods","title":"Methods","text":"<p><code>__init__(self, file_path: Union[str, Path])</code>: Initializes the VoterInfo class by parsing the TOML file at the given file_path.</p> <p><code>get_voter_info(self, vuid: str) -&gt; dict</code>: Returns a dictionary containing the voter information for the voter with the given vuid.</p> <p><code>__getattribute__(self, item: str)</code>: Overrides the default getattribute method to provide access to the reference variables generated by the VoterInfo class. </p>"},{"location":"funcs/voter_info_doc/#example","title":"Example","text":"<pre><code>from pathlib import Path\nfrom voter_info import VoterInfo\nvi = VoterInfo(Path('/path/to/state-toml-file.toml'))\nvoter_info = vi.get_voter_info('voter_id')\nlast_name = vi.LNAME\nfirst_name = vi.FNAME\naddress1 = vi.RESIDENTIAL_ADDRESS1\ncity = vi.RESIDENTIAL_CITY\nstate = vi.RESIDENTIAL_STATE\nzip_code = vi.RESIDENTIAL_ZIP\n</code></pre> <p>Here, <code>voter_info</code> is a dictionary containing the voter's information. The remaining variables are reference variables generated by the <code>VoterInfo</code> class that correspond to columns in the TOML file.</p>"},{"location":"validators/texas_validator/","title":"Texas","text":""},{"location":"validators/texas_validator/#texasvalidator","title":"TexasValidator","text":"<p><code>TexasValidator</code> is a Pydantic model that represents the data format used by the Texas Secretary of State to store voter data. It includes fields for personal information such as name, date of birth, and address, as well as fields for voting history.</p>"},{"location":"validators/texas_validator/#usage","title":"Usage","text":"<pre><code>from pydantic import ValidationError\nfrom mymodule import TexasValidator\ntry:\npatient_data = TexasValidator.parse_raw(json_string)\nexcept ValidationError as e:\nprint(e)\nelse:\n# do something with voter_data\n</code></pre>"},{"location":"validators/texas_validator/#fields","title":"Fields","text":"<ul> <li><code>VUID</code>: an integer between 0 and 999999999999</li> <li><code>EDR</code>: a date string in the format YYYYMMDD  </li> <li><code>STATUS</code>: a string representing the patient's status  </li> <li><code>LNAME</code>: the patient's last name  </li> <li><code>FNAME</code>: the patient's first name  </li> <li><code>MNAME</code>: an optional string representing the patient's middle name</li> <li><code>SFX</code>: an optional string representing the patient's suffix (e.g. Jr.)</li> <li><code>DOB</code>: a date string in the format YYYYMMDD</li> <li><code>SEX</code>: a string representing the patient's sex, either 'M', 'F', or 'U'</li> <li><code>RHNUM</code>: an optional string representing the patient's blood type (e.g. A+)</li> <li><code>RDESIG</code>: an optional string representing the patient's designation (e.g. Dr.)</li> <li><code>RSTNAME</code>: an optional string representing the patient's street name</li> <li><code>RSTTYPE</code>: an optional string representing the patient's street type (e.g. St.)</li> <li><code>RSTSFX</code>: an optional string representing the patient's street suffix (e.g. Apt. 101)</li> <li><code>RUNUM</code>: an optional string representing the patient's unit number (e.g. 101)</li> <li><code>RUTYPE</code>: an optional string representing the patient's unit type (e.g. Apt.)</li> <li><code>RCITY</code>: a string representing the patient's city</li> <li><code>RSTATE</code>: a string representing the patient's state, defaulting to 'TX'</li> <li><code>RZIP</code>: an integer between 0 and 99999 representing the patient's zip code</li> <li><code>RZIP4</code>: an optional integer between 0 and 9999 representing the patient's zip+4 code</li> <li><code>MADR1</code>: an optional string representing the patient's mailing address line 1</li> <li><code>MADR2</code>: an optional string representing the patient's mailing address line 2</li> <li><code>MCITY</code>: an optional string representing the patient's mailing address city</li> <li><code>MST</code>: an optional string representing the patient's mailing address state</li> <li><code>MZIP</code>: an optional integer between 0 and 99999 representing the patient's mailing address zip code</li> <li><code>MZIP4</code>: an optional integer between 0 and 9999 representing the patient's mailing address zip+4 code</li> <li><code>NEWHD</code>: an integer between 0 and 150 representing the patient's HD (hemodialysis) time in minutes</li> <li><code>NEWSD</code>: an integer between 0 and 35 representing the patient's SD (sustained low efficiency dialysis) time in minutes</li> <li><code>NEWCD</code>: an integer between 0 and 39 representing the patient's CD (continuous cycling peritoneal dialysis) time in minutes</li> </ul>"},{"location":"validators/texas_validator/#configuration","title":"Configuration","text":"<p><code>orm_mode = True</code>: tells Pydantic to ignore unknown fields when parsing the input data. <code>validate_assignment = True</code>: tells Pydantic to raise a validation error if an attribute is assigned an invalid value. <code>validate_all = True</code>: tells Pydantic to validate all fields, even optional ones</p>"},{"location":"validators/texas_validator/#validators","title":"Validators","text":"<p><code>clear_blank_strings</code>: Clear all empty strings with only \"\" to <code>None</code></p>"}]}